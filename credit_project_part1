Jupyter Notebook
GROUP8_CREDIT PROJECT_PART1_FIRM ANALYSIS
(unsaved changes)
Current Kernel Logo
Python 3 
File
Edit
View
Insert
Cell
Kernel
Widgets
Help

CREDIT PROJECT_PART1_FIRM ANALYSIS
Group 8 Sebastian Tian; Jiangkang Ma; Haotian He; Yuhan Li; Junjie Yin;

import numpy as np
import matplotlib.pyplot as plt
from math import log, sqrt, exp
from scipy import stats
from scipy import optimize as sco
%matplotlib inline
import pandas_datareader.data as web
import datetime as dt
from scipy.stats import norm
from yahoofinancials import YahooFinancials
import pandas as pd
def BS_call(S, X, T, rf, q, sigma):
    # Black-Scholes-Merton Call Calculation
    # Input Variable:
    # s--Stock Price; x--Exercise Price; rf--Risk Free Rate;
    # t--Time to Maturity; sigma--Volatility;  q--Continuous Dividend Yield
​
    G=float(S*exp(-q*T))
    d1 = (log(G / X)+(rf + 0.5 * sigma ** 2) * T) / (sigma * sqrt(T))
    d2 = d1 - sigma * (sqrt(T))
    Nd1 = stats.norm.cdf (d1,0.0,1.0)
    Nd2 = stats.norm.cdf (d2,0.0,1.0)
    c0 = G*Nd1 - X*exp(-rf*T)*Nd2
    return  c0
​
def Merton(V, F, T, rf, q, sigma):
    equity = BS_call(V, F, T, rf, q, sigma)
    G      = V*exp(-q*T)
    B0     = G - equity
    y      = -log(B0/F)/T
    cs     = (y-rf)
    
    return B0, y, cs, equity
def sigEquity(V, F, T, rf, q, sigmaV):
    # compute the volatility of equity given V and sigmaV
    G   = float(V*exp(-q*T))
    eqT = BS_call(V, F, T, rf, q, sigmaV)
    d1  = (log(G / F)+(rf + 0.5 * sigmaV ** 2) * T) / (sigmaV * sqrt(T))
    Nd1 = stats.norm.cdf (d1,0.0,1.0)
    vol_eqT = sigmaV*G*Nd1/eqT
    return vol_eqT
def myobjective(x):
    # This is the objective function you want to minimize. 
    # Take in a guess....Compute the equity value and equity volatility and minimize SSE
    global F, T, rf, q, EqA, sigEA
    V      = x[0]
    sigmaV = x[1]
    
    eqT   = BS_call(V, F, T, rf, q, sigmaV)
    sigET = sigEquity(V, F, T, rf, q, sigmaV)
    SSE   = (eqT-EqA)**2 + 100*(sigET- sigEA)**2
    return SSE
def Get_V_sigV():
    # This routine uses myvalues and an optimizer to imply out V and sigmaV
    global F, T, rf, q, EqA, sigEA
    Vguess = 2*EqA
    sigV   = 2*sigEA
    x      = (Vguess, sigV)
    
    
    result = sco.minimize(myobjective, x)
    ans    = result.x
    
    V      = ans[0]
    sigmaV = ans[1]
    return V, sigmaV
def DD_PD(rf, beta,MRP,sigma_V, F, V0, T):
    mu_V = rf + beta*MRP
    alpha_V = mu_V-0.5*sigma_V**2
    DD = (alpha_V*T - log(F/V0))/sigma_V*sqrt(T)
    PD = stats.norm.cdf (-DD,0.0,1.0)
    DD_rn = ((rf-0.5*sigma_V**2)*T - log(F/V0))/sigma_V*sqrt(T)
    PD_rn = stats.norm.cdf (-DD_rn,0.0,1.0)
    
    return DD, PD, DD_rn, PD_rn
​
def get_return(symbol, start, end):
    length = (start-end).days
    df = pd.DataFrame(columns=symbol)
    for i, code in enumerate(symbol):
        df.iloc[:,i] = np.log((web.DataReader(symbol[i], 'yahoo', start, end)['Adj Close'])/(web.DataReader(symbol[i], 'yahoo', start, end)['Adj Close'].shift(1))).dropna()
    return df
start = dt.datetime(2018,11,23)
end = dt.datetime(2019,11,25)
symbol = ['GNC','SMRT','ODP','ASNA','SHLDQ']
price = web.DataReader(symbol, 'yahoo', start, end)['Adj Close']
returns = get_return(symbol, start, end)
returns.head()
GNC_sigma = returns['GNC'].std()*np.sqrt(252)
GNC_sigma
SMRT_sigma = returns['SMRT'].std()*np.sqrt(252)
SMRT_sigma
ODP_sigma = returns['ODP'].std()*np.sqrt(252)
ODP_sigma
ASNA_sigma = returns['ASNA'].std()*np.sqrt(252)
ASNA_sigma
SHLDQ_sigma = returns['SHLDQ'].std()*np.sqrt(252)
SHLDQ_sigma
GNC_eq = 239.32
SMRT_eq = 34.77
ODP_eq = 1191
ASNA_eq = 85.56
SHLDQ_eq = 22.55
rf = 0.01763
MRP = 0.043
ST_GNC = 427.707
LT_GNC = 993.566
ST_SMRT = 167.296
LT_SMRT = 153.253
ST_ODP = 2185
LT_ODP = 1389
ST_ASNA = 798.2
LT_ASNA = 1338.6
ST_SHLDQ = 4915
LT_SHLDQ = 2249
F_GNC = 0.5*LT_GNC+ST_GNC
F_SMRT = 0.5*LT_SMRT+ST_SMRT
F_ODP = 0.5*LT_ODP+ST_ODP
F_ASNA = 0.5*LT_ASNA+ST_ASNA
F_SHLDQ = 0.5*LT_SHLDQ+ST_SHLDQ
T = 1
​
div_GNC=0
div_SMRT=0
div_ODP=0
div_ASNA=0
div_SHLDQ=0
​
beta_GNC = 1.25
div_GNC=0
F_GNC = 0.5*LT_GNC+ST_GNC
​
beta_SMRT = -0.01
beta_ODP = 2.54
beta_ASNA = 1.07
beta_SHLDQ = 2.41
​
​
#GNC
EqA=GNC_eq; sigEA=GNC_sigma;  F= F_GNC; q = div_GNC; T =1;
V_GNC, sigmaV_GNC = Get_V_sigV()
print(V_GNC, sigmaV_GNC)
V = V_GNC; F = F_GNC; q = 0; sigma = sigmaV_GNC
B0_GNC, y_GNC, cs_GNC, equity_GNC = Merton(V, F, T, rf, q, sigma)
print(B0_GNC, y_GNC, cs_GNC, equity_GNC)
beta = beta_GNC
sigma_V = sigmaV_GNC
F = F_GNC
V0 = V_GNC
DD_GNC, PD_GNC, DD_rn_GNC, PD_rn_GNC = DD_PD(rf, beta,MRP,sigma_V, F, V0, T)
print(DD_GNC, PD_GNC, DD_rn_GNC, PD_rn_GNC)
#SMRT
EqA=SMRT_eq; sigEA=SMRT_sigma; F= F_SMRT; q = div_SMRT; T =1;
V_SMRT, sigmaV_SMRT = Get_V_sigV()
print(V_SMRT, sigmaV_SMRT)
V = V_SMRT; F = F_SMRT; q = 0; sigma = sigmaV_SMRT
B0_SMRT, y_SMRT, cs_SMRT, equity_SMRT = Merton(V, F, T, rf, q, sigma)
print(B0_SMRT, y_SMRT, cs_SMRT, equity_SMRT)
beta = beta_SMRT
sigma_V = sigmaV_SMRT
F = F_SMRT
V0 = V_SMRT
DD_SMRT, PD_SMRT, DD_rn_SMRT, PD_rn_SMRT = DD_PD(rf, beta,MRP,sigma_V, F, V0, T)
print(DD_SMRT, PD_SMRT, DD_rn_SMRT, PD_rn_SMRT)
#ODP
EqA=ODP_eq; sigEA=ODP_sigma; F= F_ODP; q = div_ODP; T =1;
V_ODP, sigmaV_ODP = Get_V_sigV()
print(V_ODP, sigmaV_ODP)
V = V_ODP; F = F_ODP; q = 0; sigma = sigmaV_ODP
B0_ODP, y_ODP, cs_ODP, equity_ODP = Merton(V, F, T, rf, q, sigma)
print(B0_ODP, y_ODP, cs_ODP, equity_ODP)
beta = beta_ODP
sigma_V = sigmaV_ODP
F = F_ODP
V0 = V_ODP
DD_ODP, PD_ODP, DD_rn_ODP, PD_rn_ODP = DD_PD(rf, beta,MRP,sigma_V, F, V0, T)
print(DD_ODP, PD_ODP, DD_rn_ODP, PD_rn_ODP)
#ASNA
EqA=ASNA_eq; sigEA=ASNA_sigma; F= F_ASNA; q = div_ASNA; T =1;
V_ASNA, sigmaV_ASNA = Get_V_sigV()
print(V_ASNA, sigmaV_ASNA)
V = V_ASNA; F = F_ASNA; q = 0; sigma = sigmaV_ASNA
B0_ASNA, y_ASNA, cs_ASNA, equity_ASNA = Merton(V, F, T, rf, q, sigma)
print(B0_ASNA, y_ASNA, cs_ASNA, equity_ASNA)
beta = beta_ASNA
sigma_V = sigmaV_ASNA
F = F_ASNA
V0 = V_ASNA
DD_ASNA, PD_ASNA, DD_rn_ASNA, PD_rn_ASNA = DD_PD(rf, beta,MRP,sigma_V, F, V0, T)
print(DD_ASNA, PD_ASNA, DD_rn_ASNA, PD_rn_ASNA)
#SHLDQ
EqA=SHLDQ_eq; sigEA=SHLDQ_sigma; F= F_SHLDQ; q = div_SHLDQ; T =1;
V_SHLDQ, sigmaV_SHLDQ = Get_V_sigV()
print(V_SHLDQ, sigmaV_SHLDQ)
V = V_SHLDQ; F = F_SHLDQ; q = 0; sigma = sigmaV_SHLDQ
B0_SHLDQ, y_SHLDQ, cs_SHLDQ, equity_SHLDQ = Merton(V, F, T, rf, q, sigma)
print(B0_SHLDQ, y_SHLDQ, cs_SHLDQ, equity_SHLDQ)
beta = beta_SHLDQ
sigma_V = sigmaV_SHLDQ
F = F_SHLDQ
V0 = V_SHLDQ
DD_SHLDQ, PD_SHLDQ, DD_rn_SHLDQ, PD_rn_SHLDQ = DD_PD(rf, beta,MRP,sigma_V, F, V0, T)
print(DD_SHLDQ, PD_SHLDQ, DD_rn_SHLDQ, PD_rn_SHLDQ)
